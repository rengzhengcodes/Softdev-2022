DOM = Document Object Model
Environment - awareness of its environment (context it runs in)
A path in windows - directory name
The PATH in windows - path where all the executables are
	- one of the environments you load/shell
	- sequence of strings where executables live
	- when you run a shell command, it looks for the corresponding executable for a command
A program is aware of the environment its lying in
Where does Javascript live?
	- browser (sans node.js)
DOM = tree representation of a web page
	- names you can refer to in your JS code to do changes
JS
	- dynamically typed
	- first-class fxns - fxns can be passed to other functions (can be treated like vars)
	- obj-oriented
	- imperative/scripting
	- functional language
	- Classical limitations:
		- no I/O (networking, storage, graphics)
	- auto semicolon
Advent of Webdev - Softdev
	- Modern browsers made this course possible.
	- separate developer fees + environment
		- cool stuff but limited versatility
	- modern browsers are almost like OS's themselves
	- web browsers kinda work like the JS virtual machine, so don't need a specific env. and stuff, only for browsers.
		- layer of abstraction costs more resources but computers are getting better.
		- modern webapps - so much stuff coming down the internet pipeline by doing stuff through a layer that might not need to be there.
	- console.log() displays a string in the code.
	- client-side scripting language difficulties
		- when user is entering, lot more room for error.
		- another doorway for hackers
DOM - api for interacting with html
main goal - use JS to modify DOM

JS for selecting HTML elements from the DOM:
document.getElementById(<ID>)
document.getElementsByTagName(<TAG>)
document.getElementsByClassName(<CLASS>)
JS for user action awareness:
documentObject.addEventListener(EVENT, ACTION)

document.createElement(HTML TAG NAME)
element.setAttribute(NAME, VALUE)
element.getAttribute(NAME)

element.remove()
element.innerHTML
element.appendChild(ELEMENT)