1. Inserting Documents to Collections
  1. UI
    1. Add entry by hitting insert document bottom at top right of collections view.
    2. Two views, using JSON notation with "{}" menu or with one field-value pair at a time using the default view.
    3. _id field value will already be populated.
      1. Every doc must have an _id field, and each document in a collection must have a unique id.
      2. This separates them from other documents with the same other values.
      3. Collections also don't have to be isodimensional.
      4. Nothing prevents all same or all different data.
        1. But this isn't best practice, at all.
    4. When inserting a document, the _id field is populated with type ObjectId. It doesn't have to be this, but it's created by default to ensure uniqueness.
      1. If you have another unique value, you can use that for _id instead
    5. Good practice to keep records relatively consistent.
    6. Use mouse to move from field to value + add new fields. You can also use Tab.
    7. Hit insert to insert the document.
  2. Using the Mongo shell
    1. Inserting a lot of documents at the same time can lead to conflicts with duplicate data.
    2. When inserting a collection to a db with the collection, there will be a key error.
      1. A document with this exact id value already exists in the collection
      2. Using drop removes the dupe data from the db, preventing the conflict.
    3. Insert is another way, besides importing entire collections.
      1. Let's try replicating the duplicate ID error.
      2. Connect to ATLAS server, then navigate to collection.
      3. Get a random doc from collection
        1. collection.findOne() finds a singular document with a given query, or returns a document so you can see its general structure.
      4. Copy the random document.
      5. Insert it into the collection with collection.insert() with the input being the document
      6. Error reading:
        1. "nInserted" == number of inserted documents after this command
        2. "writeError" == writing doc to collection didn't succeed, so we can't add dupe IDs to a collection.
      7. If we insert without an _id field, it will work.
        1. "nInserted" == 1, the number of docs we tried to insert (hopefully)
        2. If we query everything with the fields we entered (it was dupe), they all look alike except for _id
        3. _id will be autoassigned, with a unique ObjectId object.
        4. There's also ways to prevent dupe data insertion with MongoDB outside of IDs.
  3. Inserting Multiple Documents
    1. You do so via an array as the input, with documents as items in the array.
    2. If they don't have IDs, and there's no dupe value prevention, dupe values will be inserted.
    3. If they do have IDs, the default behavior is to insert until an error is thrown, then stop inserting.
    4. If you add a second parameter, {"ordered":false} to the insert command, it inserts all documents that don't have dupe IDs, and any documents with dupe IDs don't get inserted.
      1. If a document is inserted in order, the first with an ID is inserted, the second is not and the process stops.
    5. If a collection doesn't exist on insertion, it is created.
    6. If a db doesn't exist, it can be created using the "use name_of_db" command. If no collection is added to it, it will not be saved to the Atlas cluster.
2. Updating Documents
  1. UI
    1. You can have an object (document) field, or an array field.
      1. Including objects in arrays
    2. Looking at a doc, in the top right there's options to edit, copy, clone, or delete.
    3. Click edit. It's just like creating the document in the first place.
    4. If you click add a new element, you have the choice of where to add/nest it, if it's on the same line as a nestable item.
    5. Remember, maintain consistency.
    6. Hit update to update.
  2. Shell
    1. MQL - MongoDB query language.
      1. updateOne()
        1. Updates 1 document matching the query (whichever was found first).
        2. param 1: query - {key:value}
        3. param 2: {"update_operator": {field: value, ...}}
        4. "matchedCount" == matched query return
        5. "modifiedCount" == amount modified
        6. Fieldname errors with the "$set" operator creates a new field if one doesn't exist already.
        7. Updating array fields
          1. Push operator, {$push: {field:value, ..}}
          2. Adds an array field if field doesn't exist.
      2. updateMany()
        1. Update all documents matching a query.
3. Deleting Documents and Collections
  1. UI -- garbage can button
  2. Shell
    1. deleteOne()
      1. Removes 1 doc from database
      2. Only a good idea if using "_id" as it guarantees only doc matching query is deleted.
      3. Can't rely on *One() methods to return the same doc all the time if values are shared, except _id values since they're unique.
      4. "deletedCount" == how many were deleted
    2. deleteMany()
      1. Removes all matching queries
    3. Dropping (Collections)
      1. --drop flag in importing to drop collection while importing.
      2. collection.drop() in shell.
        1. Deletes all docs inside as well
